{"version":3,"file":"index.js","sources":["../../node_modules/add-prefetch-link/dist/index.js","index.js"],"sourcesContent":["/**\n * Add a link to <head> which then gets prefetched\n */\nconst addToHead = (event) => {\n    if (navigator.connection) {\n        const connection = navigator.connection;\n        /**\n         * Check if a data saver is running\n         */\n        if (connection.saveData) {\n            return new Error('Prefetch is not available when using Data Saver');\n        }\n        /**\n         * Check for slow connections, don't prefetch on 2g or slower.\n         * effectiveType can be: slow-2g, 2g, 3g, or 4g\n         */\n        if (connection.effectiveType.includes('2g')) {\n            return new Error('Prefetch is not available on slow connection');\n        }\n    }\n    if (event.target !== null) {\n        const link = document.createElement('link');\n        link.href = event.target.href;\n        link.rel = 'prefetch';\n        document.head.appendChild(link);\n    }\n};\n/**\n * Handles the process of adding and removing EventListeners.\n * Once an event has been executed every other registered event will be removed.\n *\n * Example:\n * User defined list of events:\n * const event = ['mouseover', 'focus'];\n *\n * User focuses a link which adds it to the <head>-element.\n * Because of this any other event is not needed anymore and the one event left\n * gets removed.\n *\n * Usage can look like this:\n * document\n *  .querySelectorAll('a:not([href^=\"mailto:\"]):not([href^=\"tel:\"])')\n *  .forEach((link) => addPrefetchLink(link));\n */\nexport const addPrefetchLink = (link, userEvents = [\n    'mouseover',\n    'focus',\n]) => {\n    const handler = (event) => {\n        // Remove listeners\n        userEvents.forEach((userEvent) => link.removeEventListener(userEvent, handler));\n        addToHead(event);\n    };\n    // Register listeners\n    userEvents.forEach((userEvent) => link.addEventListener(userEvent, handler));\n};\n","/**\n * Copyright Â© Tony Spegel\n */\n\nimport { addPrefetchLink } from 'add-prefetch-link';\n\nconst links = document.querySelectorAll(\n  'a:not([href^=\"mailto:\"]):not([href^=\"tel:\"]):not([href^=\"#\"])',\n);\n\n// Call addPrefetchLink on every link\nlinks.forEach((link) => addPrefetchLink(link));\n\n/**\n * Add a CSS class dynamically w/ IntersectionObserver\n */\nconst header = document.querySelector('#site-header');\nconst sentinelElement = document.querySelector('#sentinel-element');\n\nconst observerOptions = {\n  rootMargin: `-${header.getBoundingClientRect().height}px`,\n  treshold: 1,\n};\n\nconst observer = new IntersectionObserver((entries) => {\n  if (!entries[0].isIntersecting) {\n    header.classList.add('opaque');\n  } else {\n    header.classList.remove('opaque');\n  }\n}, observerOptions);\n\nobserver.observe(sentinelElement);\n"],"names":["addPrefetchLink","link","userEvents","handler","event","forEach","userEvent","removeEventListener","navigator","connection","saveData","Error","effectiveType","includes","target","document","createElement","href","rel","head","appendChild","addToHead","addEventListener","querySelectorAll","header","querySelector","sentinelElement","observerOptions","rootMargin","getBoundingClientRect","height","treshold","IntersectionObserver","entries","isIntersecting","classList","remove","add","observe"],"mappings":"AAGA,MAyCaA,EAAkB,CAACC,EAAMC,EAAa,CAC/C,YACA,YAEA,MAAMC,EAAWC,IAEbF,EAAWG,SAASC,GAAcL,EAAKM,oBAAoBD,EAAWH,KA/C5D,CAACC,IACf,GAAII,UAAUC,WAAY,CACtB,MAAMA,EAAaD,UAAUC,WAI7B,GAAIA,EAAWC,SACX,OAAO,IAAIC,MAAM,mDAMrB,GAAIF,EAAWG,cAAcC,SAAS,MAClC,OAAO,IAAIF,MAAM,+CAExB,CACD,GAAqB,OAAjBP,EAAMU,OAAiB,CACvB,MAAMb,EAAOc,SAASC,cAAc,QACpCf,EAAKgB,KAAOb,EAAMU,OAAOG,KACzBhB,EAAKiB,IAAM,WACXH,SAASI,KAAKC,YAAYnB,EAC7B,GA0BGoB,CAAUjB,EAAM,EAGpBF,EAAWG,SAASC,GAAcL,EAAKqB,iBAAiBhB,EAAWH,IAAS,EChDlEY,SAASQ,iBACrB,iEAIIlB,SAASJ,GAASD,EAAgBC,KAKxC,MAAMuB,EAAST,SAASU,cAAc,gBAChCC,EAAkBX,SAASU,cAAc,qBAEzCE,EAAkB,CACtBC,WAAY,IAAIJ,EAAOK,wBAAwBC,WAC/CC,SAAU,GAGK,IAAIC,sBAAsBC,IACpCA,EAAQ,GAAGC,eAGdV,EAAOW,UAAUC,OAAO,UAFxBZ,EAAOW,UAAUE,IAAI,SAGtB,GACAV,GAEMW,QAAQZ","x_google_ignoreList":[0]}