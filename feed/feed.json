{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Tony Spegel | Modern Web Playground",
  "language": "de",
  "home_page_url": "https://tony-spegel.com/",
  "feed_url": "https://tony-spegel.com/feed/feed.json",
  "description": "Frontend-Entwicklung für Websites, Shopify-Onlineshops, Web- und Cross Platform-Apps",
  "author": {
    "name": "Tony Spegel",
    "url": "https://tony-spegel.com/about-me/"
  },
  "items": [{
      "id": "https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/",
      "url": "https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/",
      "title": "Beschleunigte Navigation mit Link prefetching",
      "content_html": "<p>Prefetching beschreibt einen Prozess, welcher eventuell benötigte Inhalte vorlädt,<br />\num diese schneller aufrufen zu können. Das kann beispielsweise so aussehen:<br />\n<code>&lt;link rel=&quot;prefetch&quot; href=&quot;/img/catsarecute.jpg&quot; /&gt;</code>.<br />\nBrowser werden diese Ressource dann herunterladen und zwischenspeichern<br />\n(allerdings nur im <a class=\"text-link\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Idle\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#how_is_browser_idle_time_determined\">Idle</a>)</p>\n<p>Alle Links einer Seite für das Prefetching hinzuzufügen ist natürlich wenig sinnvoll.<br />\nUm das zu optimieren ist mein Ansatz, Links nur auf eine Interaktion hin zu prefetchen - also beispielsweise<br />\ndas Zeigen mit der Maus oder das Fokussieren mit einer Tastatur. Inspiration habe ich mir hierbei<br />\ndurch das von Google entwickelte<br />\ngeholt. Der entscheidende Unterschied zu meiner Lösung ist, dass Quicklink alle Links im sichtbaren Bereichen vorlädt (wenn der Browser im Idle ist) und nicht durch eine Interaktion.</p>\n<p>Links zu meiner Lösung <em>addPrefetchLink</em>:</p>\n<section>\n<h2 id=\"anforderungen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#anforderungen\">Anforderungen</a></h2>\n<ul>\n<li>Links welche ein <code>mailto:</code> oder <code>tel:</code> enthalten, sollen nicht prefetched werden</li>\n<li>Ist ein Datensparmodus aktiv oder ist die Verbindung zu langsam, sollen keine Links prefetched werden</li>\n<li>Pro Link darf nur eine Interaktion das Prefetching auslösen</li>\n</ul>\n</section>\n<section>\n<h2 id=\"die-richtigen-links-selektieren\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#die-richtigen-links-selektieren\">Die richtigen Links selektieren</a></h2>\n<p>Da es bei E-Mail Links oder Telefonnummern keinen Sinn ergibt, diese zu prefetchen, sollten diese ignoriert werden.<br />\nIch nutze dazu einfach einen CSS Selektor welche alle Links selektiert,<br />\nderen href-Attribut nicht mit dem entsprechenden Prefix beginnt:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">document<br />  <span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a:not([href^=\"mailto:\"]):not([href^=\"tel:\"])'</span><span class=\"token punctuation\">)</span><br />  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">link</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* prefetch links */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Man könnte natürlich auch ein Array erstellen und dieses entsprechend filtern.</p>\n</section>\n<section>\n<h2 id=\"links-prefetchen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#links-prefetchen\">Links prefetchen</a></h2>\n<p>Als erstes definiere ich eine Funktion welche Links zum <code>&lt;head&gt;</code> hinzufügen soll, als einzigen Parameter ein<br />\nEvent erwartet und als Rückgabetyp zunächst <code>void</code> definiert:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> addToHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <br />  <span class=\"token comment\">/* Code */</span> <br /><span class=\"token punctuation\">}</span></code></pre>\n<p><code>event</code> nutzt schließlich dessen Property <code>target</code> als Referenz auf das Objekt (hier ein Link) welches das Event ausgelöst hat.</p>\n<section>\n<h3 id=\"datensparmodus-und-langsame-verbindungen-beruecksichtigen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#datensparmodus-und-langsame-verbindungen-beruecksichtigen\">Datensparmodus und langsame Verbindungen berücksichtigen</a></h3>\n<section></section>\nUm zu prüfen, ob entweder ein Datensparmodus aktiv oder die Verbindung zu langsam ist reichen diese beiden Bedingungen:\n```typescript\nconst addToHead = (event: Event): void | Error => { \n  if (navigator.connection) {\n    const connection = navigator.connection;\n    /**\n     * Check if a data saver is running\n     */\n    if (connection.saveData) {\n      return new Error('Prefetch is not available when using Data Saver');\n    }\n    /**\n     * Check for slow connections, don't prefetch on 2g or slower.\n     * effectiveType can be: slow-2g, 2g, 3g, or 4g\n     */\n    if (connection.effectiveType.includes('2g')) {\n      return new Error('Prefetch is not available on slow connection');\n    }\n  }\n}\n```\nAllerdings besitzt nicht jeder Browser Informationen über dessen Verbindungstyp so dass hier zuerst über `navigator.connection` \nauf das Vorhandensein hin geprüft wird. Die hier geworfenen Fehler werden nicht verwendet oder angezeigt\num nicht unnötig zu stören - es soll vor allem einfach nicht prefetched werden.\n<p>TypeScript wirft hier zunächst einen Fehler, da es die beiden Properties <code>saveData</code> und <code>effectiveType</code> nicht kennt.<br />\nUm das zu beheben, habe ich das entsprechende Interface</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NetworkInformation</span> <span class=\"token punctuation\">{</span><br />    saveData<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span><br />    effectiveType<span class=\"token operator\">:</span> <span class=\"token string\">'slow-2g'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'2g'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'3g'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'4g'</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h3 id=\"links-zum-head-hinzufuegen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#links-zum-head-hinzufuegen\">Links zum &lt;head&gt; hinzufügen</a></h3>\n<p>Das eigentliche Prefetching ist unspektakulär. Es wird ein Link-Element erzeugt, dessen <code>href</code>- auf einen Link<br />\nund das <code>rel</code>-Attribut auf <code>prefetch</code> gesetzt und schließlich zum <code>&lt;head&gt;</code> hinzugefügt:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> addToHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> Error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token comment\">// (...) previous code</span><br /><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span><br />    link<span class=\"token punctuation\">.</span>rel <span class=\"token operator\">=</span> <span class=\"token string\">'prefetch'</span><span class=\"token punctuation\">;</span><br /><br />    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</section>\n</section>\n<section>\n<h2 id=\"eine-interaktion-pro-link\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#eine-interaktion-pro-link\">Eine Interaktion pro Link</a></h2>\n<p>Um unnötige Netzwerkanfragen zu vermeiden, soll nur eine Interaktion pro Link das Prefetching auslösen.<br />\nWurde ein Link beispielsweise mit der Tastatur fokussiert, soll ein Hovern mit der Maus keinen weiteren Vorgang auslösen.<br />\nEin Event an sich nur ein einziges Mal auslösen ist einfach:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <br />  <span class=\"token comment\">/* Code */</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">once</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Pro Element nur ein einziges Event auszulösen ist etwas komplizierter.<br />\nVorbereitend wird wieder eine leere Funktion erstellt. Diese erwartet einen Link und ein Array an Events,<br />\nhier vorbelegt mit <code>mouseover</code> und <code>focus</code>.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addPrefetchLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><br />  link<span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">,</span><br />  userEvents<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> HTMLElementEventMap<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br />    <span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span><br />    <span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Code */</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Der Rest des Codes wird in zwei Teile unterteilt, einen der EventListener entfernt und das hinzufügen zum<br />\n<code>&lt;head&gt;</code> übernimmt und einen welcher EventListener hinzufügt.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addPrefetchLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><br />  link<span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">,</span><br />  userEvents<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> HTMLElementEventMap<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br />    <span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span><br />    <span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />    <span class=\"token comment\">// Remove listeners</span><br />    userEvents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br />      link<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token comment\">// Register listeners</span><br />  userEvents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br />    link<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Die hier als <code>handler</code> benannte Funktion entfernt zunächst alle auf einen Link gebundenen Events und fügt dann<br />\nden Link via <code>addToHead</code> hinzu. Fertig! Wobei da eine Sache noch bleibt: sollte ein Link öfters vorhanden sein,<br />\nwird dieser dennoch ein weiteres mal hinzugefügt. Lösen könnte man das wohl mit einem <code>Set</code> - das kommt (vielleicht)<br />\nin einem Update.</p>\n</section>\n<section>\n<h2 id=\"fazit\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#fazit\">Fazit</a></h2>\n</section>\n",
      "date_published": "2021-10-04T00:00:00Z"
    }
  ]
}
