{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Tony Spegel",
  "language": "de",
  "home_page_url": "https://tony-spegel.com/",
  "feed_url": "https://tony-spegel.com/feed/feed.json",
  "description": "Homepage &amp; Blog zu moderner Web-Entwicklung: Web-Apps, Angular, TypeScript, Web Components, Shopify &amp; Barrierefreiheit",
  "author": {
    "name": "Tony Spegel",
    "url": "https://tony-spegel.com/"
  },
  "items": [{
      "id": "https://tony-spegel.com/blog/query-assigned-element-content/",
      "url": "https://tony-spegel.com/blog/query-assigned-element-content/",
      "title": "Einen Decorator für Inhalte eines Slots entwickeln",
      "content_html": "<section>\n<h2 id=\"motivation\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/query-assigned-element-content/#motivation\">Motivation</a></h2>\n<p>Vor einer Weile habe ich eine Web Component <a href=\"https://tony-spegel.com/blog/toc-observer\">entwickelt</a>, welche CSS-Klassen zu Links in einem Inhaltsverzeichnis<br />\nje nach Sichtbarkeit der zugehörigen Elemente im Viewport hinzufügen/entfernen kann.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>toc-observer</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#tethys<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Tethys<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#mimas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Mimas<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>toc-observer</span><span class=\"token punctuation\">></span></span><br /><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tethys<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mimas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Web Components bieten den Vorteil, dass diese so konfiguriert werden können, dass sie in sich geschlossen sind und von außen nur über klar definierte Schnittstellen beeinflusst werden können.</p>\n<p>Zu diesen Schnittstellen gehört das <code>&lt;slot&gt;</code>-Element bzw. Attribut. Es verhält sich als ein Platzhalter, welcher eigenes Markup, in dem Fall das Inhaltsverzeichnis meiner Posts, in die Component aufnehmen kann. Um nun den &quot;Inhalt&quot; (die Links) des zum Slot zugewiesenen Element ( das <code>&lt;ul&gt;</code>) verarbeiten zu können, benutze ich in einem ersten Schritt den zu Lit gehörenden <code>@queryAssignedElements</code>-<a href=\"https://lit.dev/docs/api/decorators/#queryAssignedElements\">Decorator</a>:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">customElement</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'toc-observer'</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TocObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">queryAssignedElements</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>slot<span class=\"token operator\">:</span> <span class=\"token string\">'toc'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">private</span> _tocList<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>HTMLUListElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">private</span> <span class=\"token keyword\">get</span> <span class=\"token function\">_tocListItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocList<span class=\"token operator\">?.</span>length<br />      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">querySelectorAll</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'[href^=\"#\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br />      <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Bei der Nutzung dieses Decorators bin ich zunächst darüber gestolpert, dass ausschließlich die zum Slot zugewiesenen Elemente zurückgegeben werden - was so aber auch Sinn ergibt. Deswegen nutze ich in einem weiteren Schritt auch einen Getter, welcher mit einem <code>querySelectorAll</code> die enthaltenen Links zurückgibt. Das ist nicht großartig kompliziert aber hat mich dann motiviert meinen eigenen Decorator zu schreiben der am Ende beide Schritte in einem vereint:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">queryAssignedElementContent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> selector<span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> slot<span class=\"token operator\">:</span> <span class=\"token string\">'list'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br />  accessor #tocLinks<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h2 id=\"implementation\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/query-assigned-element-content/#implementation\">Implementation</a></h2>\n<details>\n   <summary>Gut zu wissen: Decorators</summary>\n   <div id=\"details-content\">\n    <p>\n      Decorators ermöglichen es, das Verhalten von Classes und deren Member zu ändern. Dazu zählt beispielsweise das Hinzufügen von Metadaten, die Erweiterung von Funktionalität oder die Validierung von Daten.\n    </p>\n    <p>\n      Es ist wichtig zu beachten, dass hier Standard Decorators gemeint sind, die derzeit als <a href=\"https://github.com/tc39/proposal-decorators\">Stage 3 Proposal</a> existieren. (Legacy) Decorators können bereits seit längerem genutzt werden und entsprechen einem vorherigen Entwurf. Obwohl Standard Decorators derzeit von keinem Browser unterstützt werden, können sie bereits mit Compilern wie TypeScript (>= 5.x.x) oder Babel genutzt werden.\n    </p>\n   </div>\n</details>\n<p>Meine Implementation basiert auf dem derzeit aktuellen Stage 3 Proposal und unterscheidet sich somit von den bisher bereits verfügbaren Legacy Decorators (siehe <em>Gut zu wissen</em>). Den aktuellen Status des Proposals verfolge ich schon eine Weile und habe dann schließlich im Mai mit der Umsetzung begonnen. Eine kleine Einschränkung direkt vorab: zum jetzigen Zeitpunkt ist es noch nicht mögliche beide Arten von Decorators parallel in Lit zu nutzen - das ist aber bereits in Arbeit.</p>\n<p>Die eigentliche Logik im Code ist, wie in der <a href=\"https://tony-spegel.com/blog/query-assigned-element-content/#motivation\">Motivation</a> zu sehen, überschaubar. Die Herausforderung für mich lag eher darin, ein so umfassendes, technisches Dokument wie das Proposal komplett zu lesen und so weit zu verstehen, dass ich damit arbeiten konnte. Viel gelernt habe ich im Austausch mit <a href=\"https://github.com/vdegenne\">Valentin Degenne</a>, welchen ich über den <a href=\"https://discord.gg/eMaSX7G5\">Lit Discord</a> kennenlernen durfte und mich bei Fragen immer wieder unterstützt hat.</p>\n<p>Nach einer Weile habe ich dann verstanden, dass ich einen <code>Class Auto-Accessor</code> benötige. Diese werden mit dem neuen <code>accessor</code> Keyword ausgezeichnet.</p>\n<p>Eine Auto-accessor definiert automatisch ein Getter/Setter-Paar so dass:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span><br />  accessor x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>grob zu folgendem übersetzt wird:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span><br />  #x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '#' marks private fields in JS</span><br /><br />  <span class=\"token keyword\">get</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#x<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token keyword\">set</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#x <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Auf diese Art funktioniert das nur für einfache Felder. Das stellt aber kein Problem dar, weil diese sich weiter anpassen lassen. Grob ausgedrückt soll der Decorator dieses so dekorierte Feld nehmen und mit einem angepassten Getter ersetzen in dem es mit zusätzlicher Logik angereichert wird.</p>\n<p>Meine Implementation basiert auf Grund der Nähe auch stark auf dem <code>queryAssignedElements</code>-<a href=\"https://github.com/lit/lit/blob/main/packages/reactive-element/src/decorators/query-assigned-elements.ts#L79\">Decorators</a>:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// A: Signature</span><br /><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">queryAssignedElementContent</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><br />  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Element<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The `this` type to which the target applies</span><br />  <span class=\"token constant\">E</span> <span class=\"token keyword\">extends</span> Element <span class=\"token comment\">// The property type for the class `accessor` field.</span><br /><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> QueryAssignedElementContentOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><br />    _target<span class=\"token operator\">:</span> ClassAccessorDecoratorTarget<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><br />    <span class=\"token comment\">// Context object containing information about the value being decorated</span><br />    context<span class=\"token operator\">:</span> ClassAccessorDecoratorContext<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><br />  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token comment\">// B: Runtime check for better DX</span><br />    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">!==</span> <span class=\"token string\">'accessor'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Only supported on class accessors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><br /><br />    <span class=\"token comment\">// C: Building a new getter</span><br />    <span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> ClassAccessorDecoratorResult<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> shadowRoot <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Root node within a shadow dom</span><br />        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> selector<span class=\"token punctuation\">,</span> slot <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Extract options</span><br /><br />        <span class=\"token comment\">// C1: Construct a slot element selector</span><br />        <span class=\"token keyword\">const</span> slotSelector <span class=\"token operator\">=</span> slot <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slot[name=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>slot<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slot:not([name])</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br />        <span class=\"token comment\">// C2: Select a slot element</span><br />        <span class=\"token keyword\">const</span> slotElement <span class=\"token operator\">=</span><br />          shadowRoot<span class=\"token operator\">?.</span><span class=\"token generic-function\"><span class=\"token function\">querySelector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLSlotElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>slotSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token comment\">// C3: Get slot assigned elements</span><br />        <span class=\"token keyword\">const</span> assignedElements <span class=\"token operator\">=</span> slotElement<span class=\"token operator\">?.</span><span class=\"token function\">assignedElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br />          <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span><br />          flatten<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br />        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token comment\">// C4: Query slot for its content</span><br />        <span class=\"token keyword\">const</span> slotContent <span class=\"token operator\">=</span> assignedElements<span class=\"token operator\">?.</span>length<br />          <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>assignedElements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">querySelectorAll</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br />          <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br /><br />        <span class=\"token keyword\">return</span> slotContent<span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<section>\n<h3 id=\"a-signature\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/query-assigned-element-content/#a-signature\">A: Signature</a></h3>\n<p>Ein <code>ClassAccessorDecorator</code> gibt ein <code>ClassAccessorDecoratorResult</code> zurück, welches als Parameter ein <code>target</code> (hier ungenutzt) sowie <code>context</code> erwartet. Um dieselben Konfigurationsmöglichkeiten wie der <code>queryAssignedElements</code> zu bieten, definiere dieses Interface:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">QueryAssignedElementContentOptions</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token comment\">/**<br />   * The selector used to query the content of the slot's assigned elements.<br />   * Must be a valid CSS selector string.<br />   * ```html<br />   * &lt;ul slot=\"list\"><br />   *   &lt;li>Tethys&lt;/li> // ← use a selector to query these elements<br />   * &lt;/ul><br />   * ```<br />   */</span><br />  selector<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><br />  <span class=\"token comment\">/**<br />   * The name of the slot to query elements from.<br />   * ```html<br />   * &lt;ul slot=\"list\">&lt;/ul><br />   *           ^<br />   * ```<br />   * @optional<br />   */</span><br />  slot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Lediglich <code>slot</code> definiere ich als optional, da ich später ohne Angabe eines Namens auf den Default Slot zurückgreife.</p>\n</section>\n<section>\n<h3 id=\"b-runtime-check\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/query-assigned-element-content/#b-runtime-check\">B: Runtime check</a></h3>\n<p>Um nicht nur in TypeScript sondern auch in JavaScript etwas mehr Sicherheit zu bieten, habe ich noch einen Check integriert, um sicherzustellen, dass der Decorator nur an der richtigen Stelle, nämlich an einer Class Property, verwendet werden kann. Wäre es nicht für diesen Check wäre auch das <code>context</code>-Objekt unbenutzt.</p>\n</section>\n<section>\n<h3 id=\"c-building-a-new-getter\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/query-assigned-element-content/#c-building-a-new-getter\">C: Building a new getter</a></h3>\n<p>Der Kern dieses Decorators ist der neue Getter. Im ersten Schritt (<strong>C1</strong>) konstruiere ich den Slot-Selektor für <strong>C2</strong> und greife auf den Standard-Slot zurück, sollte kein <code>name</code> übergeben werden. Eine Web Component kann aber muss nämlich nicht nur aus einem Slot-Element bestehen. Inklusive <strong>C3</strong> ist die Implementierung noch nah am Vorbild denn erst in <strong>C4</strong> extrahiere ich den für mich eigentlich interessanten Inhalt.</p>\n</section>\n</section>\n<section>\n<h2 id=\"fazit-and-ausblick\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/query-assigned-element-content/#fazit-and-ausblick\">Fazit &amp; Ausblick</a></h2>\n<p>Auch wenn ich zum jetzigen Stand meinen Decorator noch nicht in meinen Projekten nutzen kann, habe ich hier eine Menge gelernt und wertvolles Feedback einholen können sowohl was die Implementierung aber auch insbesondere das Arbeiten mit anspruchsvolleren Spezifikationen betrifft.<br />\nVor allem das Ganze typsicher umzusetzen und Generics über mehrere Ebenen hinweg zu nutzen war nicht ganz ohne. Auch spannend würde ich es bezeichnen, dass zur Zeit der Umsetzung wenig bis eher keine anderen Posts existierten, die genau diese Art an Decorators behandelt haben.</p>\n<p>Das Ganze sehe ich im Moment noch als experimentell aber als guten ersten Schritt für weitere Entwicklungen an. Logik hinter einem Decorator zu verstecken ist natürlich auch immer etwas <span aria-hidden=\"true\">✨</span>Magie<span aria-hidden=\"true\">✨</span>, da es auf den ersten Blick nicht ersichtlich ist, was konkret passiert. Da hier aber der Anwendungsfall relativ kompakt ist, sehe ich das als kein großes Problem an.</p>\n<p>Jetzt bleibt meinerseits lediglich zu warten, bis seitens Lit die Unterstützung für &quot;Hybrid&quot;-Decorators kommt und Browser anfangen Standard-Decorators zu implementieren. In meinem nächsten Post wird es um einen weiteren Decorator und dazu passenden Anwendungsfall gehen.</p>\n</section>\n",
      "date_published": "2023-09-20T00:00:00Z"
    },{
      "id": "https://tony-spegel.com/blog/toc-observer/",
      "url": "https://tony-spegel.com/blog/toc-observer/",
      "title": "Table of Contents Component",
      "content_html": "<p>Eine Table of Contents (<abbr>TOC</abbr>) stellt ein Inhaltsverzeichnis dar und findet sich häufig in Blogs oder Artikeln wieder. Für meinen Blog (und alle die es nutzen möchten), habe ich eine Component entwickelt, welche Links in einem TOC dynamisch hervorheben kann, sobald die dazugehörigen Überschriften oder Abschnitte sichtbar werden. Eine Demo könnt ihr mobil im Header unter &quot;Inhalt&quot; oder neben dem Post an der Seite sehen.</p>\n<p>Links zum Download gibt es hier: <a href=\"https://github.com/TonySpegel/toc-observer\">GitHub</a>, <a href=\"https://www.npmjs.com/package/toc-observer-component\">NPM</a>.</p>\n<div class=\"disclaimer\">\n  <span>Hinweis</span>\n  <p>\n    Dieser Post geht davon aus, dass ihr euch schon ein wenig mit Web Components beschäftigt habt - wenn nicht, ist das aber auch in Ordnung.\n    Hier ein paar Links:\n  </p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">MDN Web Docs: Web Components</a></li>\n<li><a href=\"https://lit.dev/docs/\">lit.dev: What is Lit?</a></li>\n<li><a href=\"https://web.dev/learn/html/template/\">Learn HTML!: Template, slot, and shadow</a></li>\n</ul>\n</div>\n<section>\n<h2 id=\"ueberlegungen-zur-funktionsweise\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/toc-observer/#ueberlegungen-zur-funktionsweise\">Überlegungen zur Funktionsweise</a></h2>\n<p>&quot;Live&quot;-Inhaltsverzeichnisse, wie zuvor beschrieben gibt es einige - unterscheiden kann man diese vor allem darin, ob diese Abschnitte oder Überschriften hervorheben.</p>\n<figure style=\"max-inline-size: 620px\">\n  <img src=\"https://tony-spegel.com/img/2023/toc-observer/mdn-web-docs--toc-example.webp\" width=\"1055\" height=\"618\" alt=\"Beispielhaftes Inhaltsverzeichnis mit Textabschnitt des Artikels 'Web Components' von MDN Web Docs\" class=\"sample-img\" />\n  <figcaption>\n    Beispielhaftes\n    <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components\" target=\"_blank\" rel=\"noopener noreferrer\">Inhaltsverzeichnis</a> von MDN Web Docs\n  </figcaption>\n</figure>\n<p>Hier am Beispiel der MDN Web Docs kann man sehen, dass der Menüpunkt &quot;Concepts and usage&quot; weiterhin hervorgehoben wird, obwohl von diesem Abschnitt nur noch eine Zeile lesbar ist und der Abschnitt &quot;Guides&quot; bereits einen viel größeren Platz einnimmt. Ich habe mich dann gefragt, was diese Art des Inhaltsverzeichnisses überhaupt darstellen oder aussagen möchte. Denn wenn die beiden Abschnitte gleich viel Platz einnehmen würden, wäre immer noch &quot;Concepts and usage&quot; hervorgehoben. Aber geht es darum, was man gerade liest oder wo man sich im Post befindet? Insbesondere was man gerade liest, lässt sich ja nicht wirklich sagen. Nach etwas Recherche bin ich dann auf diesen <a href=\"https://www.bram.us/2020/01/10/smooth-scrolling-sticky-scrollspy-navigation/\">Post</a> von <a href=\"https://www.bram.us/about/\">Bramus Van Damme</a> gestoßen - dieser schlägt folgendes, vereinfachtes Markup vor:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beschreibung<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Beschreibung<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>…<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Also Abschnitte mit ID mit darauf folgender Überschrift. Auf diese Art werden später ganze Abschnitte erfasst und somit potentiell auch mehrere Links im TOC hervorgehoben. Das ist, wie ich finde, eine genauere Darstellung dessen was gerade auf der Seite angezeigt wird bzw. wo man sich gerade befindet. Weswegen diese Struktur aber für mich auch problematisch wurde, führe ich später noch genauer aus. Für diese Component gilt beispielhaft das folgende Markup:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>toc-observer</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#beschreibung<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Beschreibung<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><br />        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#lebensweise<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Lebensweise<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br />        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#nahrung<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Nahrung<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>toc-observer</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Hierbei besonders wichtig ist, dass zum einen ein <code>ul</code> mit <code>slot=&quot;toc&quot;</code> vorhanden ist und zum anderen Links zu diesen passenden Abschnitten oder Überschriften enthalten sind. Die Ordnung dieser Überschriften ist dabei nicht von Relevanz.</p>\n</section>\n<section>\n<h2 id=\"intersection-observer-and-datenstruktur\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/toc-observer/#intersection-observer-and-datenstruktur\">IntersectionObserver &amp; Datenstruktur</a></h2>\n<p>Dieses &quot;Live&quot;-Inhaltsverzeichnis wird häufig mit dem so genannten &quot;ScrollSpy&quot;-Feature in Verbindung gebracht und heutzutage mit dem <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">IntersectionObserver</a> realisiert. Diese API ist in der Lage, dass Überschneiden von Elementen mit einem Elternelement oder des Dokuments zu überwachen und bietet somit genau das - was für diese Component benötigt wird.</p>\n<p>Die hier entstehende Component ist verhältnismäßig kompakt, enthält kein eigenes Styling und arbeitet vor allem (imperativ) mit dem <code>Slot</code>-Element.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>LitElement<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lit'</span><span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><br />  customElement<span class=\"token punctuation\">,</span><br />  queryAssignedElements<span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lit/decorators.js'</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">customElement</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'toc-observer'</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TocObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token comment\">/**<br />   * Converts '_tocList' into a getter that returns the assignedElements of the given slot.<br />   * Provides a declarative way to use HTMLSlotElement.assignedElements<br />   */</span><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">queryAssignedElements</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>slot<span class=\"token operator\">:</span> <span class=\"token string\">'toc'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">private</span> _tocList<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>HTMLUListElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br />  <span class=\"token comment\">/**<br />   * Receive any items within '_tocList' if present<br />   */</span><br />  <span class=\"token keyword\">private</span> <span class=\"token keyword\">get</span> <span class=\"token function\">_tocListItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocList<span class=\"token operator\">?.</span>length<br />      <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">querySelectorAll</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'[href^=\"#\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br />      <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span></code></pre>\n<p>Wie zuvor demonstriert, wird das Inhaltsverzeichnis von &quot;außen&quot; über eine mit dem Slot-Attribut versehene Liste in die Component gegeben. Das hat zur Folge, dass alle Kind-Elemente dieser Liste manuell, wie hier in der <code>_tocListItems</code> Methode gezeigt, selektiert werden müssen.<br />\nDas Slot-Element selbst wähle ich mit Hilfe des <code>@queryAssignedElements</code>-<a href=\"https://lit.dev/docs/components/shadow-dom/#query-assigned-nodes\">Decorators</a> aus.</p>\n<p>Diese <code>_tocListItems</code> (die Links des TOC) bilden nun die Grundlage der (plural) IntersectionObserver. Grundsätzlich kann man nämlich entweder einen IntersectionObserver haben, welcher mehrere Elemente überwacht oder jeweils einen pro Element. Ich habe mich für letzteres entschieden, da ich es als einfacher nachzuvollziehen empfunden habe. Angemessen wäre noch ein Test, ob es hierbei zu Performanceeinbußen kommen kann. Diese Observer entsprechen als Datenstruktur folgender <code>Map</code>:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> anchorHashObserverMap<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><br />  HTMLAnchorElement<span class=\"token punctuation\">[</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br />  IntersectionObserver<br /><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre>\n<p>oder vereinfacht am Beispiel:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><br />  <span class=\"token punctuation\">[</span><span class=\"token string\">'#beschreibung'</span>, IntersectionObserver<span class=\"token punctuation\">]</span>,<br />  <span class=\"token punctuation\">[</span><span class=\"token string\">'#lebensweise'</span>, IntersectionObserver<span class=\"token punctuation\">]</span>,<br />  <span class=\"token punctuation\">[</span><span class=\"token string\">'#nahrung'</span>, IntersectionObserver<span class=\"token punctuation\">]</span><br /><span class=\"token punctuation\">]</span></code></pre>\n<p>Nun zum eigentlichen IntersectionObserver und zum hervorheben der Links:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">createIdObserverMap</span><span class=\"token punctuation\">(</span><br />  anchors<span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token punctuation\">[</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IntersectionObserver<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><br />    anchors<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>anchor<span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>hash<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">;</span><br /><br />      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><br />        hash<span class=\"token punctuation\">,</span><br />        <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><br />          <span class=\"token punctuation\">(</span>entries<span class=\"token operator\">:</span> IntersectionObserverEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />            entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>intersectionRatio <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectTocLink</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tocActiveClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br />              <span class=\"token punctuation\">}</span><br /><br />              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectTocLink</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tocActiveClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />          <span class=\"token comment\">// IntersectionObserver options</span><br />          <span class=\"token punctuation\">{</span><br />            root<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rootElement<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br />            rootMargin<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rootMargin<span class=\"token punctuation\">,</span><br />          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Mit diesem Code iteriere ich über ein Array von Links, extrahiere jeweils den Hash um diesen in der <code>selectTocLink</code>-Methode als Selektor zu nutzen.<br />\nZu diesen ausgewählten Links, wird dann eine CSS Klasse hinzugefügt/entfernt, sobald der dazugehörige Observer einen <code>intersectionRatio</code>-Wert von größer/kleiner 0 besitzt.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">private</span> <span class=\"token function\">selectTocLink</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLAnchorElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocList<span class=\"token operator\">?.</span>length<br />    <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">querySelector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[href=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><br />    <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Auch hier wieder manuelles selektieren der Links. Das ist eigentlich ganz grob auch schon alles, was die reine Funktionalität betrifft. Aber wie eingangs erwähnt, bringt die Entscheidung auch Abschnitte zu unterstützen ein paar Herausforderungen mit sich, auf die ich im nächsten Abschnitt eingehe.</p>\n</section>\n<section>\n<h2 id=\"verschiedene-html-strukturen-unterstuetzen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/toc-observer/#verschiedene-html-strukturen-unterstuetzen\">Verschiedene HTML Strukturen unterstützen</a></h2>\n<p>Das eingangs erwähnte, vereinfachte Markup geht davon aus, dass Sections eine ID besitzen. Üblicher ist es aber in <abr>SSG</abr> (Static site generators), eine Section zu haben auf die eine Überschrift mit ID und einem Link folgt. Also eher so:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beschreibung<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#beschreibung<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Beschreibung<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Opossums sind die größten Beutelratten.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Das liegt daran, dass solche SSG häufig mit Markdown-Dateien arbeiten und anhand derer HTML erzeugt wird. Es ist also naheliegend, die ID direkt an Überschriften anzuhängen.</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> Beschreibung</span><br />Opossums sind die größten Beutelratten.</code></pre>\n<p>Das Problem hiermit ist, dass man nun ausgehend vom Link dessen Elternelement auswählen muss, wenn man eine Section überwachen möchte. Am einfachsten wäre es, den CSS Selektor <code>:has()</code> zu nutzen - Stand jetzt wird dieser aber noch nicht von allen Browsern unterstützt.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**<br /> * Useful for observing nested markup like this:<br /> * &lt;section><br /> *   &lt;!-- ^observe --><br /> *   &lt;h2 id=\"possum\">Possum&lt;/h2><br /> * &lt;/section><br /> *<br /> * Observing wrapper elements instead of just headings<br /> * has the advantage that those have more area to intersect with.<br /> *<br /> *     ┌─────────┐<br /> *     │ #possum │<br /> *   ┌─┼─────────┼─┐<br /> *   │ │         │ │<br /> *   │ └─────────┘ │&lt; Viewport<br /> *   │ ^section    │<br /> *   └─────────────┘<br /> */</span><br /><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">public</span> observeParent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token comment\">// Should be used together with observeParent</span><br /><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">public</span> parentSelector <span class=\"token operator\">=</span> <span class=\"token string\">'section'</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token comment\">/**<br /> * The 'firstUpdated' lifecycle is called after the component's DOM<br /> * has been updated the first time, immediately before updated() is called.<br /> * Only then an element's slot content (our toc items) is available and can be observed.<br /> */</span><br />override <span class=\"token function\">firstUpdated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token comment\">// Observe items when at least one is available</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocListItems<span class=\"token operator\">?.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>anchorHashObserverMap <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createIdObserverMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_tocListItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>anchorHashObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">,</span> anchorHash<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>anchorHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observeParent <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><br /><br />      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><br />        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observeParent <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span><br />        item<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentSelector<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><br />      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentSelector<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Die hier verwendete <code>firstUpdated</code> Methode ist ein so genannter <a href=\"https://lit.dev/docs/components/lifecycle/\">Lifecycle</a> und wie in dessen Kommentar beschrieben, der Zeitpunkt, an dem der Inhalt des Slots verfügbar ist. Es wird die <code>anchorHashObserverMap</code> erstellt und die enthaltenen Observer beginnen ihre Elemente zu überwachen. Abhängig davon, ob die Component mit dem <code>observeParent</code>-Attribut versehen wird oder nicht, wird entweder by default ein Abschnitt oder ein beliebig wählbares Element überwacht.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>toc-observer</span> <span class=\"token attr-name\">observeParent</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>toc-observer</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Übrig bleibt nun nur noch, das Überwachen der Elemente zu beenden, für den Fall das <code>&lt;toc-observer&gt;</code> aus dem DOM entfernt wird. Auch das. lässt sich bequem in einem Lifecycle lösen:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**<br /> * Stop observing when the component is removed from the DOM<br /> */</span><br />override <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token comment\">/**<br />   * As there are no toc-items left to highlight,<br />   * observing elements should be stopped<br />   */</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>anchorHashObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> obs<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Eine Lit Web Component besitzt außerdem eine <code>render</code>-<a href=\"https://lit.dev/docs/components/rendering/\">Methode</a>. Diese fällt allerdings sehr kurz aus, da die Component ausschließlich imperativ mit dem Inhalt des Slots arbeitet.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">override <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;slot name=\"toc\">&lt;/slot></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h2 id=\"limitationen-and-fazit\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/toc-observer/#limitationen-and-fazit\">Limitationen &amp; Fazit</a></h2>\n<p>Das imperative selektieren von DOM-Elementen außerhalb des Shadow-DOM fühlt sich meiner Empfindung nach immer etwas umständlich an, da nicht direkt ersichtlich ist, in welchem Zusammenhang Logik und User Interface stehen und man sich darauf verlassen muss, dass die hinzugefügten Elemente den intern vorhergesehenen entsprechen. Als Limitation sehe ich, dass im Moment noch die (reactive) <code>observeParent</code>-Property verwendet werden muss, statt auf den CSS-Selektor <code>:has()</code> zurückgreifen zu können. Außerdem ist der Hash in <code>Map&lt;HTMLAnchorElement['hash'], IntersectionObserver&gt;</code> doch nicht ganz ideal, da so auch Elemente erfasst werden, die lediglich als Sprungmarken zu Überschriften gedacht sind. Als Verbesserung werde ich den Selektor konfigurierbar machen, so dass dieser spezifischer ist und nur die Elemente überwacht werden, welche wirklich relevant sind.</p>\n</section>\n",
      "date_published": "2023-04-28T00:00:00Z"
    },{
      "id": "https://tony-spegel.com/blog/image-comparison-component/",
      "url": "https://tony-spegel.com/blog/image-comparison-component/",
      "title": "Image Comparison Component",
      "content_html": "<p>In diesem Post geht es darum, eine Component zu entwickeln, welche es ermöglicht, Bilder auf verschiedene Arten zu vergleichen. Bilder können mit einem Slider, einem Overlay oder in einer Split-Ansicht verglichen werden.</p>\n<image-comparison variant=\"slider\" sliderPrompt=\"Slider bewegen, um zu vergleichen\" overlayPrompt=\"Tippen und gedrückt halten, um zu vergleichen\" class=\"post-img\" id=\"image-comparison-demo\">\n  <label slot=\"label-before\">Ohne Filter</label>\n  <label slot=\"label-after\">Graustufen</label>\n  <img slot=\"image-before\" src=\"https://tony-spegel.com/img/2023/image-comparison/2022_1004_14254000-w3120--opt.jpg\" width=\"440\" alt=\"Blumen in Paris\" />\n  <img slot=\"image-after\" src=\"https://tony-spegel.com/img/2023/image-comparison/2022_1004_14254000-w3120_grayscale--opt.jpg\" width=\"440\" alt=\"Blumen in Paris dargestellt in Graustufen\" />\n</image-comparison>\n<div class=\"slider-set-wrapper\">\n  <fieldset id=\"slider-variant-set\" class=\"slider-set\">\n    <legend>Variante</legend>\n    <div>\n      <input type=\"radio\" id=\"slider-variant\" name=\"variant\" value=\"slider\" checked=\"\" />\n      <label for=\"slider-variant\">Slider</label>\n    </div>\n    <div>\n      <input type=\"radio\" id=\"overlay-variant\" name=\"variant\" value=\"overlay\" />\n      <label for=\"overlay-variant\">Overlay</label>\n    </div>\n    <div>\n      <input type=\"radio\" id=\"split-variant\" name=\"variant\" value=\"split\" />\n      <label for=\"split-variant\">Split</label>\n    </div>\n  </fieldset>\n  <!-- <fieldset id=\"slider-reading-direction-set\" class=\"slider-set\">\n    <legend>Leserichtung</legend>\n    <div>\n      <input type=\"radio\" id=\"ltr\" name=\"reading-direction\" value=\"ltr\" checked>\n      <label for=\"ltr\"><abbr>LTR</abbr> (Left To Right)</label>\n    </div>\n    <div>\n      <input type=\"radio\" id=\"rtl\" name=\"reading-direction\" value=\"rtl\">\n      <label for=\"rtl\"><abbr>RTL</abbr> (Right To Left)</label>\n    </div>\n  </fieldset> -->\n</div>\n<p><code>&lt;image-comparison&gt;</code> unterstützt neben diesen Varianten diverse Tastaturkürzel, verschiedene Leserichtungen, Custom Events und ist durch Slots, Attribute und CSS Custom Properties konfigurierbar. Im Folgenden gehe ich auf diese Aspekte ein und beginne mit dem Slider.</p>\n<p>Ist es sinnvoll, mehrere Components in einer zu vereinen? tl;dr: <a href=\"https://tony-spegel.com/blog/image-comparison-component/#warum-das-eigentlich-nicht-sinnvoll-ist\">In diesem Fall eigentlich nicht</a>.</p>\n<p><a href=\"https://github.com/TonySpegel/image-comparison\">GitHub</a>, <a href=\"https://npmjs.com/package/image-comparison-component\">NPM</a>, <a href=\"https://lit.dev/playground/#gist=2b393dfba73ce32f7b3426492142b926\">Lit Playground</a></p>\n<hr />\n<div class=\"disclaimer\">\n  <span>Hinweis</span>\n  <p>\n    Dieser Post geht davon aus, dass ihr euch schon ein wenig mit Web Components beschäftigt habt - wenn nicht, ist das aber auch in Ordnung.\n    Hier ein paar Links:\n  </p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\">MDN Web Docs: Web Components</a></li>\n<li><a href=\"https://lit.dev/docs/\">lit.dev: What is Lit?</a></li>\n<li><a href=\"https://web.dev/learn/html/template/\">Learn HTML!: Template, slot, and shadow</a></li>\n</ul>\n</div>\n<section>\n<h2 id=\"slider\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#slider\">Slider</a></h2>\n<p>Die Slider-Variante ist die komplexeste der drei Varianten. Komplex vor allem durch die vielseitigen Interaktions- und Konfigurationsmöglichkeiten aber weniger durch das CSS.</p>\n<section>\n<h3 id=\"html-and-css\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#html-and-css\">HTML &amp; CSS</a></h3>\n<p>Wenn man die Component nutzen möchte, gilt folgendes HTML. Die Label sind zwar optional aber zumindest die <code>alt</code>-Attribute der Bilder sollten gesetzt werden:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-comparison</span><br />  <span class=\"token attr-name\">variant</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider<span class=\"token punctuation\">\"</span></span><br />  <span class=\"token attr-name\">sliderPrompt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Move the slider to compare<span class=\"token punctuation\">\"</span></span><br />  <span class=\"token attr-name\">overlayPrompt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Tap and hold to compare<span class=\"token punctuation\">\"</span></span><br /><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label-before<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Ohne Filter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label-after<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Graustufen<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/img/2023/before.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rote Zierquitte<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/img/2023/after.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rote Zierquitte (Graustufen)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-comparison</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Auffällig sind hierbei vor allem die drei gesetzten Attribute sowie die zwei Label und Bildelemente. Die <code>variant</code> bestimmt sowohl das Verhalten als auch das Aussehen der Component, die beiden Prompt-Attribute geben kurze Hinweise zur Interaktion. Die sogenannten <code>slot</code>-Attribute sind eine Eigenheit der Web Components und können als eine Art Schnittstelle gesehen werden. In dieser Component werden sie genutzt, um die zu vergleichenden Bilder sowie deren Label anzuzeigen. Intern folgt das HTML diesem vereinfachten Schema:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label-before<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label-after<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span><br /><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container-before<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-before<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br /><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container-after<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">inset</span><span class=\"token punctuation\">(</span>0 50% 0 0<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-after<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br /><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Neben zusätzlichem Markup, wie dem Button, steckt der größte Teil der <span aria-hidden=\"true\">✨</span>Magie<span aria-hidden=\"true\">✨</span> in der <code>clip-path: inset(0 50% 0 0)</code>-Anweisung des zweiten Containers. Der umliegende Container an sich ist schnell erklärt:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#image-container</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-grid<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"images\"</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Ich setze hier vor allem deswegen auf ein Grid-Layout, damit ich die verschiedenen Elemente einfach übereinander stapeln kann. Dazu nutze ich <code>grid-template-areas: &quot;images&quot;</code> um mich in den übrigen Elementen auf dieses beziehen zu können. <code>overflow: hidden</code> wird dann gesetzt, um den dann überstehenden Divider des Buttons abzuschneiden.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#container-before, #container-after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> images<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> images<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-border-width<span class=\"token punctuation\">)</span> solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--slider-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">aspect-ratio</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> col-resize<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">button:before, button:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-bar-width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% - <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-bar-width<span class=\"token punctuation\">)</span> / 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--slider-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> -1<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">button:before</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% + <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-size<span class=\"token punctuation\">)</span> / 2<span class=\"token punctuation\">)</span> - <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-border-width<span class=\"token punctuation\">)</span> / 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">button:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-size<span class=\"token punctuation\">)</span> - <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--thumb-border-width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Wie am Anfang beschrieben, werden nun beide Container sowie der Button mit <code>grid-area: images</code> übereinander gestapelt. Die Reihenfolge im Markup entscheidet dann darüber, welches Element ganz oben liegt - hier ist es der Button. Dieser wird dann mit <code>align-self: center</code> vertikal zentriert und horizontal um die Hälfte der eigenen Breite verschoben. Um dann schließlich den Divider des Sliders zu erzeugen, positioniere ich einfach die Pseudo-Elemente <code>:before</code> und <code>:after</code> ober- und unterhalb des Buttons und nutze dafür einige CSS Variablen. Auf diese Weise habe ich zwar einige Variablen aber das macht es für mich nachvollziehbarer und einfacher zu rechnen, was wie platziert wird.<br />\nAußerdem ist es so für Dritte ebenso leichter weil klar ist, was angepasst werden kann. Das war es auf der CSS Seite des Sliders. Eine Demo zu diesem Stand könnt ihr auf <a href=\"https://codepen.io/TonySpegel/pen/oNabodW?editors=1100\">Codepen</a> betrachten.</p>\n</section>\n<section>\n<h3 id=\"entwicklung-der-slider-funktion\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#entwicklung-der-slider-funktion\">Entwicklung der Slider-Funktion</a></h3>\n<p>Die wichtigste Information, welche der Slider benötigt, ist die Position des Dividers.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageComparison</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span> reflect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">public</span> sliderPosition<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Lit nutzt an vielen Stellen so genannte Decorators, ein Pattern welches es einem ermöglicht, verschiedene Konstrukte mit zusätzlicher Funktionalität zu erweitern. Dazu ein Zitat aus der offiziellen <a href=\"https://lit.dev/docs/components/properties/\">Dokumentation</a>:</p>\n<blockquote cite=\"https://lit.dev/docs/components/properties/\">\n\"Lit components receive input and store their state as JavaScript class fields or properties. Reactive properties are properties that can trigger the reactive update cycle when changed, re-rendering the component, and optionally be read or written to attributes.\"\n</blockquote>\n<p>In diesem Decorator werden zwei <a href=\"https://lit.dev/docs/components/properties/#property-options\">Optionen</a> genutzt. Zum einen <code>type</code>, diese gibt an auf welche Art ein Attribut intern konvertiert werden soll. Zum anderen sorgt <code>reflect</code> dafür, dass der interne Wert auch wieder nach außen an das Attribut gegeben wird. Vereinfacht ausgedrückt, ermöglicht das eine Synchronisation des äußeren wie inneren Zustands.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>image<span class=\"token operator\">-</span>comparison sliderposition<span class=\"token operator\">=</span><span class=\"token string\">\"50\"</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"slider\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>image<span class=\"token operator\">-</span>comparison<span class=\"token operator\">></span><br /><span class=\"token comment\">// ↓↑</span><br /><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span> reflect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">public</span> sliderPosition<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Jetzt zur eigentlichen Funktionalität, welche diesen Wert setzen wird. Lit setzt grundsätzlich auf einen deklarativen Ansatz, um dessen Templates zu beschreiben. Statt Schritt für Schritt anzugeben, wie sich ein Template verändert, gibt man in deklarativen Ansätzen vor, wie ein Template in dessen finalen Zustand auszusehen hat. Das bedeutet nicht, dass man nicht beide Ansätzen mischen kann.</p>\n<p>Dazu folgt der grundsätzliche weitere Aufbau des Templates. Alles was im Template anzuzeigen ist, wird in der <code>render()</code>-Methode aufgerufen:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageComparison</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span> reflect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">public</span> sliderPosition<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">state</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">private</span> isRtl<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br />      &lt;div id=\"image-container\"><br />        &lt;slot name=\"label-before\">&lt;/slot><br />        &lt;slot name=\"label-after\">&lt;/slot><br /><br />        &lt;div id=\"container-before\"><br />          &lt;slot name=\"image-before\">&lt;/slot><br />        &lt;/div><br /><br />        &lt;div<br />          id=\"container-after\"<br />          style=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRtl<br />            <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">clip-path: inset(0 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">% 0 0)</span><span class=\"token template-punctuation string\">`</span></span><br />            <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">clip-path: inset(0 0 0 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">%)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />        ><br />          &lt;slot name=\"image-after\">&lt;/slot><br />        &lt;/div><br /><br />        &lt;button<br />          @mousedown=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSlidingState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />          @mousemove=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> MouseEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideCompareHandler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />          style=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">left: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><br />            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRtl <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition<br />          <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"<br />        ><br />        &lt;/button><br />      &lt;/div><br />    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Hier nutze ich zwei neue Konzepte im Lit Kontext: die <a href=\"https://lit.dev/docs/components/events/#adding-event-listeners-in-the-element-template\">@-Syntax</a> definiert JavaScript-typische EventListener, der <code>@state()</code>-Decorator einen ausschließlich internen Zustand. Inbesondere <code>isRtl</code> wird später wichtig sein, um eine so genannte <abbr>RTL</abbr> (Right-to-left) script Unterstützung, also Sprachen welche von Rechts nach Links gelesen werden, zu bieten. Hier hat das den einfachen Hintergrund, dass ich das Vorzeichen im <code>left</code>-Attribut ändern oder im <code>inset()</code> das Rechteck von der anderen Seite aus aufziehen kann.</p>\n<p>Jetzt zu den eigentlichen Methoden, ich gehe dabei nur auf die wirklich wichtigen und etwas komplizierteren ein:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">private</span> slideCompareHandler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideCompare</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token comment\">/**<br /> * Converts 'cursor' position and updates the UI accordingly<br /> */</span><br /><span class=\"token keyword\">private</span> slideCompare <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MouseEvent <span class=\"token operator\">|</span> TouchEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slidingActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">convertCursorToSliderPosition</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    pos <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRtl <span class=\"token operator\">?</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> pos <span class=\"token operator\">:</span> pos<span class=\"token punctuation\">;</span><br /><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Wenn <code>slidingActive</code> wahr ist, wird die Cursor-Position relativ zur Container-Position konvertiert und abhängig von der Leserichtung gesetzt.<br />\nÜbrigens sieht man hier auch gut, dass nicht alles deklarativ sein kann und interne Werte natürlich auch imperativ gesetzt werden.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> clamp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> min<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span><br />  Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token comment\">/**<br /> * The relative position of a cursor (as in: a touch or mouse device)<br /> * is converted into a clamped slider position value<br /> */</span><br /><span class=\"token function\">convertCursorToSliderPosition</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> TouchEvent <span class=\"token operator\">|</span> MouseEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> width <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageContainer<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scrollX <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">const</span> pageX <span class=\"token operator\">=</span> event <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MouseEvent</span> <span class=\"token operator\">?</span><br />    event<span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">:</span><br />    event<span class=\"token punctuation\">.</span>changedTouches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">const</span> xOffset <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> scrollX<span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> pageX <span class=\"token operator\">-</span> xOffset<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">const</span> sliderPostion <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><br />    <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">return</span> sliderPostion<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Abhängig davon ob es sich beim ausgeführten Event um ein <code>Touch</code>- oder <code>Mouse</code>-Event handelt, stehen unterschiedliche Properties zur Verfügung. In beiden Fällen wird jedoch <code>getBoundingClientRect()</code> genutzt, um die Position und Breite des Containers zu ermitteln. Mit Hilfe dieser wird in Abhängigkeit dann bestimmt, wo sich das Eingabegerät relativ zu diesem befindet, um am Ende diesen Wert in eine Zahl zwischen 0 und 100 zu konvertieren. Ich gebe zu, dass das etwas kompliziert und nicht einfach zu verstehen ist - aber damit werden diverse Eventualitäten abgedeckt die sonst zu einem Fehlverhalten führen würden.</p>\n<p>Im Grunde genommen ist, dass die Funktionalität die notwendig ist, um den Slider zu bewegen und Bilder vergleichen zu können. Das allein ist aber noch nicht ausreichend. Zum einen muss noch der Barrierefreiheit wegen (unter anderem) eine Tastatur Unterstützung und zum anderen etwas was ich Housekeeping nenne, implementiert werden.</p>\n</section>\n<section>\n<h3 id=\"barrierefreiheit-des-sliders\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#barrierefreiheit-des-sliders\">Barrierefreiheit des Sliders</a></h3>\n<p>Zur Barrierefreiheit des Sliders zähle ich, dass dieser nicht nur mit einer Maus, sondern möglichst mit beliebigen Eingabegeräten genutzt werden kann und auch seinen internen Zustand nach außen an Screenreader zu kommunizieren weiß. Wenn es darum geht, möglichst barrierefreie Lösungen zu entwickeln, ist die <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/\">Patterns</a> Seite des W3C ein optimaler Einstieg. Diese bietet diverse, immer wiederkehrende, Patterns wie beispielsweise Tabs, Slide Shows und ähnliches an und geht dabei auf deren Besonderheiten ein. Das <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\">Window Splitter</a> Pattern passt hierbei am ehesten zur Slider-Variante.<br />\nUm Tastatureingaben abzufangen, extrahiere ich aus dem <code>KeyboardEvent</code> zum einen die gedrückten Tasten, zu denen vor allem die Cursortasten zählen sowie <code>ctrlKey</code>, <code>metaKey</code> (<kbd>Win</kbd> / <kbd>⌘</kbd>) und <code>shiftKey</code>, um diese in Kombination mit den Cursortasten zu nutzen.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**<br /> * Applied when shift is pressed with an arrow key (variant 'slider')<br /> */</span><br /><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> Number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">private</span> sliderSteps<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token comment\">/**<br /> * Handle arrow, home &amp; end keys and use more steps when shift is pressed<br /> */</span><br /><span class=\"token keyword\">private</span> keyboardSliderHandler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> KeyboardEvent<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">,</span> ctrlKey<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> metaKey<span class=\"token punctuation\">,</span> shiftKey<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isRtl <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> isLtr <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>isRtl<span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> steps <span class=\"token operator\">=</span> shiftKey <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderSteps <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token comment\">// These keys would scroll the page when pressed</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'Space'</span> <span class=\"token operator\">||</span> key <span class=\"token operator\">===</span> <span class=\"token string\">'Home'</span> <span class=\"token operator\">||</span> key <span class=\"token operator\">===</span> <span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowLeft'</span> <span class=\"token operator\">&amp;&amp;</span> isLtr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowRight'</span> <span class=\"token operator\">&amp;&amp;</span> isRtl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ← Firefox would highlight parts of the UI and labels w/o it</span><br />    position <span class=\"token operator\">-=</span> steps<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowRight'</span> <span class=\"token operator\">&amp;&amp;</span> isLtr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowLeft'</span> <span class=\"token operator\">&amp;&amp;</span> isRtl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// same as above regarding Firefox</span><br />    position <span class=\"token operator\">+=</span> steps<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token comment\">// Also often called 'Pos1' or '⌘ + ←' on MacOS</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Home'</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>metaKey <span class=\"token operator\">||</span> ctrlKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowLeft'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token comment\">// End or '⌘ + →' on MacOS</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'End'</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>metaKey <span class=\"token operator\">||</span> ctrlKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowRight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    position <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token comment\">// Center thumb position</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'Enter'</span><span class=\"token punctuation\">)</span> position <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition <span class=\"token operator\">=</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Eine weitere Möglichkeit den Slider zu bedienen, ist die direkte Eingabe, in dem man auf die gewünschte Position tippt. Das kann Menschen helfen, welche motorisch nicht dauerhaft etwas gedrückt halten und ziehen können und fühlt sich meiner Meinung nach auch intuitiver an. Damit man ohne störendes Verhalten Bilder weiter über das Kontextmenü speichern kann, habe ich die Aktion auf die (in der Regel) linke und mittlere Maustaste beschränkt. Außerdem lässt sich der Slider durch doppeltes klicken/tippen zentrieren.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br />  &lt;div<br />    @mousedown=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> MouseEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> button <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><br />      <span class=\"token comment\">// The left or the wheel/middle button</span><br />      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><br />        button <span class=\"token operator\">===</span> MouseActions<span class=\"token punctuation\">.</span>Main <span class=\"token operator\">||</span><br />        button <span class=\"token operator\">===</span> MouseActions<span class=\"token punctuation\">.</span>Auxiliary<br />      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSlidingState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideCompareHandler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><br />    <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    id=\"image-container\"<br />  ><br />    &lt;button @dblclick=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sliderPosition <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>&lt;/button><br />  &lt;/div><br /></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>Jetzt bleibt noch die Kommunikation mit Screenreadern übrig, um hier eine gute Integration zu ermöglichen, nutze ich ich diverse <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/#:~:text=the%20arrow%20keys.-,WAI%2DARIA%20Roles%2C%20States%2C%20and%20Properties,-The%20element%20that\">WAI-ARIA Roles</a> wie aus dem W3C Pattern zu entnehmen ist. Diese kommunizieren vor allem die minimale, maximale und aktuellen Position des Sliders.</p>\n</section>\n<section>\n<h3 id=\"housekeeping-mit-lifecycle-callbacks\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#housekeeping-mit-lifecycle-callbacks\">Housekeeping 🧽 mit Lifecycle-Callbacks</a></h3>\n<p>Im einem vorherigen Abschnitt bin ich darauf eingegangen, dass die <a href=\"https://lit.dev/docs/components/events/#adding-event-listeners-in-the-element-template\">@-Syntax</a> es ermöglicht, EventListener hinzuzufügen. EventListener werden üblicherweise entfernt, wenn eine Component aus dem DOM entfernt wird. Das gilt aber nur für solche Events, die direkt an ein Element gebunden sind, also beispielsweise ein Click-Event an einem Button. Globale EventListener, also solche, die die Tastatur oder Mauseingaben verarbeiten und auch außerhalb einer Component verfügbar sein müssen, sind davon ausgenommen.</p>\n<p>Das ist an sich aber nicht weiter tragisch, denn Web Components unterstützen so genannte Lifecycles. Das sind Callbacks die zu unterschiedlichen Zeitpunkten ausgelöst werden so dass hier genau solche Arbeiten durchgeführt werden können. <code>connectedCallback</code> ist hierbei genau der richtige Zeitpunkt, denn die Component wurde zum DOM hinzugefügt.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**<br /> * Component is added to the document's DOM,<br /> * add EventListeners for variant 'slider'.<br /> */</span><br />override <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addSliderEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/**<br /> * Slider EventListener are added when 'variant' is set to 'slider'<br /> */</span><br /><span class=\"token keyword\">private</span> <span class=\"token function\">addSliderEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>variant <span class=\"token operator\">===</span> <span class=\"token string\">'slider'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token comment\">// Moving the slider</span><br />    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideCompareHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'touchmove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideCompareHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token comment\">// Stop moving the slider</span><br />    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideEndHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'touchend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideEndHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Äquivalent dazu müssen die EventListener dann spätestens entfernt werden, wenn die Component nicht mehr im DOM ist:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**<br /> * Clean up EventListeners<br /> */</span><br />override <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeSliderEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Da meine Component mehrere Varianten über das dazu passende Attribut unterstützt, muss auch das bedacht werden:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**<br /> * Because slider EventListeners are only added when the<br /> * 'variant' attribute is set to 'slider', you also have to react to its changes<br /> */</span><br />override <span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><br />  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'variant'</span><span class=\"token punctuation\">,</span><br />  oldVal<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><br />  newVal<span class=\"token operator\">:</span> Variants<br /><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'variant'</span> <span class=\"token operator\">&amp;&amp;</span> newVal <span class=\"token operator\">!==</span> oldVal <span class=\"token operator\">&amp;&amp;</span> newVal <span class=\"token operator\">===</span> <span class=\"token string\">'slider'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addSliderEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'variant'</span> <span class=\"token operator\">&amp;&amp;</span> newVal <span class=\"token operator\">!==</span> oldVal <span class=\"token operator\">&amp;&amp;</span> newVal <span class=\"token operator\">===</span> <span class=\"token string\">'overlay'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeSliderEventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Damit stelle ich sicher, dass EventListener nur dann hinzugefügt bzw. entfernt werden, wenn es auch wirklich notwendig ist.</p>\n</section>\n</section>\n<section>\n<h2 id=\"overlay\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#overlay\">Overlay</a></h2>\n<p>Die Overlay Variante ist deutlich kompakter und arbeitet im Grunde genommen aber auch hier wieder mit einem praktischen Trick, den ich mir durch das Stapeln des Grid-Layouts zu nutzen mache.</p>\n<image-comparison variant=\"overlay\" overlayPrompt=\"Tippen und gedrückt halten, um zu vergleichen\" id=\"kasimir-overlay\" class=\"post-img\">\n  <label slot=\"label-before\">Ohne Filter</label>\n  <label slot=\"label-after\">Graustufen</label>\n  <img slot=\"image-before\" src=\"https://tony-spegel.com/img/2023/image-comparison/kasimir--opt.jpg\" width=\"440\" alt=\"Tabby Katze\" />\n  <img slot=\"image-after\" src=\"https://tony-spegel.com/img/2023/image-comparison/kasimir_filter--opt.jpg\" width=\"440\" alt=\"Tabby Katze in Graustufen\" />\n</image-comparison>\n<p>Immer dann, wenn mit einem Eingabegerät auf das Bild gedrückt und gehalten wird, ändere ich lediglich die Reihenfolge der Bilder im Stack und mehr nicht. Im CSS sieht das dann so aus:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* Switch order of images */</span><br /><span class=\"token selector\">#image-container.pressed ::slotted([slot='image-after'])</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">order</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>ausgelöst wird das durch folgenden Code:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">state</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">private</span> pressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">const</span> overlayTemplate <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br />  &lt;div<br />    @keydown=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyboardOverlayHandler<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    @keyup=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    @mousedown=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    @mouseup=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    @mouseleave=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPressed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    tabindex=\"0\"<br />    title=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>overlayPrompt<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />    id=\"image-container\"<br />    class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pressed <span class=\"token operator\">?</span> <span class=\"token string\">'pressed'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"<br />  ><br />    &lt;slot name=\"label-before\">&lt;/slot><br />    &lt;slot name=\"label-after\">&lt;/slot><br />    &lt;slot name=\"image-after\">&lt;/slot><br />    &lt;slot name=\"image-before\">&lt;/slot><br />  &lt;/div><br />  &lt;slot name=\"prompt\">&lt;/slot><br /></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre>\n<p>Also wird nur eine einzige interne Variable geflippt.</p>\n</section>\n<section>\n<h2 id=\"split\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#split\">Split</a></h2>\n<image-comparison variant=\"split\" class=\"post-img\">\n  <label slot=\"label-before\">Ohne Filter</label>\n  <label slot=\"label-after\">Graustufen</label>\n  <img slot=\"image-before\" src=\"https://tony-spegel.com/img/2023/image-comparison/kasimir--opt.jpg\" width=\"212\" alt=\"Tabby Katze\" />\n  <img slot=\"image-after\" src=\"https://tony-spegel.com/img/2023/image-comparison/kasimir_filter--opt.jpg\" width=\"212\" alt=\"Tabby Katze in Graustufen\" />\n</image-comparison>\n<p>Es wird immer weniger komplex je weiter dieser Artikel fortschreitet, denn die Split-Variante ist tatsächlich ausschließlich CSS. Nicht besonders spannend, es ist einfach ein umbrechendes zweispaltiges Layout:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:host([variant='split']) #image-container</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--split-gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><br />    auto-fit<span class=\"token punctuation\">,</span><br />    <span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--split-column-min-width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--split-column-max-width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">:host([variant='split']) .container-split-column</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">:host([variant='split']) ::slotted([slot^='label-'])</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h2 id=\"custom-events\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#custom-events\">Custom Events</a></h2>\n<p>Custom Events oder auch &quot;Synthetic Events&quot; sind wie der Name vermuten lässt eigens geschaffene Events. Da der Aufbau immer ähnlich ist, gehe ich hier nur auf das Event des Sliders ein:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DragEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> eventName <span class=\"token operator\">=</span> <span class=\"token string\">'drag-event'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span><br /><br />  targetElement<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>DragEvent<span class=\"token punctuation\">.</span>eventName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br />      bubbles<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br />      cancelable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br />      composed<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>targetElement <span class=\"token operator\">=</span> targetElement<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Dieses löse ich immer dann aus, wenn der Slider nicht mehr bewegt wird:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">private</span> slideEndHandler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSlidingState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  window<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DragEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Abfangen könnte man dieses Event wie üblich so:</p>\n<pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'drag-event'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In Class field <code>targetElement</code> steckt dann auch das bekannte <code>sliderPosition</code>-Attribut und dessen Wert.</p>\n</section>\n<section>\n<h2 id=\"internationalisierung\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#internationalisierung\">Internationalisierung</a></h2>\n<p>An manchen Stellen habe ich bereits angeschnitten, dass die Component auch Sprachen unterstützt, welche von rechts nach links gelesen werden. Meistens ist das auch kein Problem, denn Layouts wie <code>Grid</code> oder <code>Flex</code> unterstützen diese bereits von Haus aus so dass kein weiterer Code nötig ist. Leider gibt es noch nicht in allen Browsern die CSS Pseudo Klasse <code>:dir()</code> so dass dann doch an einigen Stellen auf JavaScript zurückgegriffen werden muss. In HTML bestimmt das <code>dir</code>-Attribut die Leserichtung eines Elements und wirkt sich auf alle Kind-Elemente aus.<br />\nNormalerweise könnte man mit <code>closest()</code> ohne weiteres ausgehend von einem Element bis zum <code>Document</code> suchen bis man ein Element mit dem entsprechenden Attribut gefunden hat - im ShadowDOM ist das allerdings etwas komplizierter, da dieses in sich geschlossen ist. Der folgende Ansatz ist deswegen auch leider nicht perfekt, sollte aber in den meisten Fällen ausreichend sein. Auf diese Einschränkung gehe ich gleich noch etwas genauer ein. Grundsätzlich nutze ich aber einen <code>MutationObserver</code> und gebe diesem einen Selektor, welche entweder das nächste Element mit einem <code>dir</code>-Attribut oder das <code>Document</code> an sich ist. Ähnlich der EventListener werden auch Observer im <code>connectedCallback</code> aktiviert und im <code>disconnectedCallback</code> deaktiviert.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageComparison</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LitElement</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">state</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br />  <span class=\"token keyword\">private</span> isRtl<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">private</span> readingDirectionObserver<span class=\"token operator\">!</span><span class=\"token operator\">:</span> MutationObserver<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token comment\">/**<br />   * Callback to handle any mutations made to the dir-attribute<br />   */</span><br />  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">readingDirectionHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>mutations<span class=\"token operator\">:</span> MutationRecord<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> mutation <span class=\"token keyword\">of</span> mutations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>attributeName <span class=\"token operator\">===</span> <span class=\"token string\">'dir'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dir <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> mutation<span class=\"token punctuation\">.</span>target <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">;</span><br />        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRtl <span class=\"token operator\">=</span> dir <span class=\"token operator\">===</span> <span class=\"token string\">'rtl'</span><span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><br />    <span class=\"token punctuation\">}</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token comment\">/**<br />   * Component is added to the document's DOM, setup readingDirectionObserver<br />   */</span><br />  override <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readingDirectionObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readingDirectionHandler<br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token comment\">// Find closest element with a dir attribute by traversing upwards</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textDirectionElement <span class=\"token operator\">=</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[dir]'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span><br />      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ownerDocument<span class=\"token operator\">?.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token comment\">// Found one? Is it 'rtl'?</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRtl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textDirectionElement<span class=\"token punctuation\">.</span>dir <span class=\"token operator\">===</span> <span class=\"token string\">'rtl'</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token comment\">// Start observing 🔍</span><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readingDirectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textDirectionElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br />      attributes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><br />  <span class=\"token comment\">/**<br />   * Stop observing the dir attribute<br />   */</span><br />  override <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readingDirectionObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>In den aller meisten Fällen ist die folgende Integration ausreichend:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rtl-container<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rtl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-comparison</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token comment\">&lt;!-- Content --></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-comparison</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Die Component würde korrekterweise in rtl gelesen und genutzt werden können. Was nicht funktionieren würde, ist das die Component selbst in einem <code>Slot</code> oder im ShadowDOM benutzt wird. Es ist auf jeden Fall eine Limitierung. Umgehen könnte man das eventuell noch in dem man ein weiteres Attribut für die Component selbst einführt. Ich denke man kann damit aber leben. Die meisten Personen mit denen ich gesprochen habe, die ein rtl-Layout betreffen würde, wären zum Beispiel gar nicht davon ausgegangen, dass sich die Bilder drehen müssten. Das ist natürlich nur anekdotisch.</p>\n</section>\n<section>\n<h2 id=\"drei-components-in-einer\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#drei-components-in-einer\">Drei Components in einer</a></h2>\n<p>Sollte man wirklich drei Components in einer verwirklichen? Wahrscheinlich eher nicht, aber interessant war es trotzdem und in meinen Tests mit einem älteren Smartphone gab es auch nicht wirklich Performance Probleme. Um &quot;live&quot; zwischen den Varianten wechseln zu können, bin ich wie folgt vorgegangen.<br />\nEinen Type für Varianten definieren:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Variants</span> <span class=\"token operator\">=</span> <span class=\"token string\">'overlay'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'slider'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'split'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Eine Property für die Component definieren:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">property</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br /><span class=\"token keyword\">private</span> variant<span class=\"token operator\">:</span> Variants <span class=\"token operator\">=</span> <span class=\"token string\">'slider'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Mit Hilfe dieses Decorators wird ein Attribut erstellt auf dessen Änderungen automatisch reagiert werden kann und bei Bedarf neu gerendert wird.</p>\n<p>Templates definieren und auf Property reagieren lassen:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> sliderTemplate <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> overlayTemplate <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> splitTemplate <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token keyword\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br />    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token generic-function\"><span class=\"token function\">choose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Variants<span class=\"token punctuation\">,</span> TemplateResult<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>variant<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><br />      <span class=\"token punctuation\">[</span><span class=\"token string\">'slider'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sliderTemplate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">[</span><span class=\"token string\">'overlay'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> overlayTemplate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">[</span><span class=\"token string\">'split'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> splitTemplate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"><br />  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Die zu Lit gehörende <a href=\"https://lit.dev/docs/templates/directives/#choose\"><code>choose</code></a>-Direktive kann nun auf diese Art typsicher eines von drei Templates rendern und dies allein durch das ändern des <code>variant</code>-Attributes:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-comparison</span> <span class=\"token attr-name\">variant</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-comparison</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-comparison</span> <span class=\"token attr-name\">variant</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>overlay<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-comparison</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-comparison</span> <span class=\"token attr-name\">variant</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>split<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-comparison</span><span class=\"token punctuation\">></span></span></code></pre>\n<section>\n<h3 id=\"warum-das-eigentlich-nicht-sinnvoll-ist\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#warum-das-eigentlich-nicht-sinnvoll-ist\">Warum das eigentlich nicht sinnvoll ist</a></h3>\n</section>\n</section>\n<section>\n<h2 id=\"integration-auf-websites-und-in-frameworks\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#integration-auf-websites-und-in-frameworks\">Integration auf Websites und in Frameworks</a></h2>\n<p>Um diese Component beispielsweise in WordPress zu integrieren, reicht es aus, folgendes Script-Tag zum gewünschten Template hinzuzufügen und über deren Slots zu konfigurieren.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><br />  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><br />  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/image-comparison-component/dist/src/image-comparison.js?module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br /></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br /><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>image-comparison</span><br />  <span class=\"token attr-name\">variant</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider<span class=\"token punctuation\">\"</span></span><br />  <span class=\"token attr-name\">sliderPrompt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Move the slider to compare<span class=\"token punctuation\">\"</span></span><br />  <span class=\"token attr-name\">overlayPrompt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Tap and hold to compare<span class=\"token punctuation\">\"</span></span><br /><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label-before<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Ohne Filter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label-after<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Graustufen<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/img/2023/before.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rote Zierquitte<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image-after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/img/2023/after.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rote Zierquitte (Graustufen)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>image-comparison</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>In anderen Umgebungen sieht das dann ähnlich aus. Wenn man die Component über NPM installiert hat und dessen Attribute über Radio Buttons ändern möchte könnte man so etwas machen:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'image-comparison-component/image-comparison.js'</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">const</span> imageComparisonDemoComponent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><br />  <span class=\"token string\">'#image-comparison-demo'</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">const</span> radioButtonVariants <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[name=\"variant\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />radioButtonVariants<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>radioButton<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br />  radioButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span><br />    imageComparisonDemoComponent<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'variant'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</section>\n<section>\n<h2 id=\"fazit\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#fazit\">Fazit</a></h2>\n<p>Die Arbeit an dieser Component hatte ich bereits vor einer Weile abgeschlossen und konnte jetzt durch das Schreiben des Posts noch einiges dazu lernen. Dazu zählte auf jeden Fall das hinzufügen von Default-Styles, die Integration in einen statischen Seitengenerator und insbesondere das Handling des <code>rtl</code>-Attributs. Etwas später in der Entwicklung habe ich dann auch noch eine Component Library entdeckt, welche ebenfalls in Lit geschrieben ist und auch eine solche Component enthält. Wer also eine ausgewachsenere Variante nutzen möchte, dem kann ich nur <a href=\"https://shoelace.style/components/image-comparer\">Shoelace</a> empfehlen. Viel Spaß mit der Component :)</p>\n</section>\n<section>\n<h2 id=\"update-rtl-bugfix\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/image-comparison-component/#update-rtl-bugfix\">Update: RTL Bugfix</a></h2>\n</section>\n",
      "date_published": "2023-04-14T00:00:00Z"
    },{
      "id": "https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/",
      "url": "https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/",
      "title": "Beschleunigte Navigation mit Link prefetching",
      "content_html": "<p>Prefetching beschreibt einen Prozess, welcher eventuell benötigte Inhalte vorlädt, um diese schneller aufrufen zu können. Das kann beispielsweise so aussehen: <code>&lt;link rel=&quot;prefetch&quot; href=&quot;/img/catsarecute.jpg&quot; /&gt;</code>. Browser werden diese Ressource dann herunterladen und zwischenspeichern (allerdings nur im <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#how_is_browser_idle_time_determined\">Idle</a>).</p>\n<p>Alle Links einer Seite für das Prefetching hinzuzufügen ist natürlich wenig sinnvoll.<br />\nUm das zu optimieren ist mein Ansatz, Links nur auf eine Interaktion hin zu prefetchen - also beispielsweise das Zeigen mit der Maus oder das Fokussieren mit einer Tastatur. Inspiration habe ich mir hierbei durch das von Google entwickelte <a href=\"https://getquick.link/\">Quicklink</a> geholt. Der entscheidende Unterschied zu meiner Lösung ist, dass Quicklink alle Links im sichtbaren Bereichen vorlädt (wenn der Browser im Idle ist) und nicht durch eine Interaktion.</p>\n<p>Links zu meiner Lösung <em>addPrefetchLink</em>:</p>\n<ul>\n<li><a href=\"https://codepen.io/TonySpegel/full/PojrqZb\">Demo (Codepen)</a></li>\n<li><a href=\"https://www.npmjs.com/package/add-prefetch-link\">NPM</a></li>\n<li><a href=\"https://github.com/TonySpegel/addPrefetchLink\">GitHub</a></li>\n</ul>\n<section>\n<h2 id=\"anforderungen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#anforderungen\">Anforderungen</a></h2>\n<ul>\n<li>Links welche ein <code>mailto:</code> oder <code>tel:</code> enthalten, sollen nicht prefetched werden</li>\n<li>Ist ein Datensparmodus aktiv oder ist die Verbindung zu langsam, sollen keine Links prefetched werden</li>\n<li>Pro Link darf nur eine Interaktion das Prefetching auslösen</li>\n</ul>\n</section>\n<section>\n<h2 id=\"die-richtigen-links-selektieren\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#die-richtigen-links-selektieren\">Die richtigen Links selektieren</a></h2>\n<p>Da es bei E-Mail Links, Telefonnummern oder Linkf auf aktuellen Seite keinen Sinn ergibt, diese zu prefetchen, sollten diese ignoriert werden. Ich nutze dazu einfach einen CSS Selektor welche alle Links selektiert, deren href-Attribut nicht mit dem entsprechenden Prefix beginnt:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* JavaScript */</span><br /><span class=\"token keyword\">const</span> links <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><br />  <span class=\"token string\">'a:not([href^=\"mailto:\"]):not([href^=\"tel:\"]):not([href^=\"#\"])'</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />document<br />  <span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span><br />  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">link</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Man könnte natürlich auch ein Array erstellen und dieses entsprechend filtern.</p>\n</section>\n<section>\n<h2 id=\"links-prefetchen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#links-prefetchen\">Links prefetchen</a></h2>\n<p>Als erstes definiere ich eine Funktion welche Links zum <code>&lt;head&gt;</code> hinzufügen soll, als einzigen Parameter ein Event erwartet und als Rückgabetyp zunächst <code>void</code> definiert:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* TypeScript */</span><br /><span class=\"token keyword\">const</span> addToHead <span class=\"token operator\">=</span><br />  <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p><code>event</code> nutzt schließlich dessen Property <code>target</code> als Referenz auf das Objekt (hier ein Link) welches das Event ausgelöst hat.</p>\n<section>\n<h3 id=\"datensparmodus-und-langsame-verbindungen-beruecksichtigen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#datensparmodus-und-langsame-verbindungen-beruecksichtigen\">Datensparmodus und langsame Verbindungen berücksichtigen</a></h3>\n<p>Um zu prüfen, ob entweder ein Datensparmodus aktiv oder die Verbindung zu langsam ist reichen diese beiden Bedingungen:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* TypeScript */</span><br /><span class=\"token keyword\">const</span> addToHead <span class=\"token operator\">=</span><br />  <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> Error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span><br />      <span class=\"token comment\">/**<br />       * Check if a data saver is running<br />       */</span><br />      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span>saveData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Prefetch is not available when using Data Saver'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><br />      <span class=\"token comment\">/**<br />       * Check for slow connections, don't<br />       * prefetch on 2g or slower.<br />       * effectiveType can be: slow-2g, 2g, 3g, or 4g<br />       */</span><br />      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span>effectiveType<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Prefetch is not available on slow connections'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />      <span class=\"token punctuation\">}</span><br />    <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Allerdings besitzt nicht jeder Browser Informationen über dessen Verbindungstyp so dass hier zuerst über <code>navigator.connection</code><br />\nauf das Vorhandensein hin geprüft wird. Die hier geworfenen Fehler werden nicht verwendet oder angezeigt um nicht unnötig zu stören - es soll vor allem einfach nicht prefetched werden.</p>\n<p>TypeScript wirft hier zunächst einen Fehler, da es die beiden Properties <code>saveData</code> und <code>effectiveType</code> nicht kennt. Um das zu beheben, habe ich das entsprechende Interface erweitert:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* TypeScript */</span><br /><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NetworkInformation</span> <span class=\"token punctuation\">{</span><br />    saveData<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span><br />    effectiveType<span class=\"token operator\">:</span> <span class=\"token string\">'slow-2g'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'2g'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'3g'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'4g'</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h3 id=\"links-prefetchen-1\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#links-prefetchen-1\">Links prefetchen</a></h3>\n<p>Das eigentliche Prefetching ist unspektakulär. Es wird ein Link-Element erzeugt, dessen <code>href</code>- auf einen Link<br />\nund das <code>rel</code>-Attribut auf <code>prefetch</code> gesetzt und schließlich zum <code>&lt;head&gt;</code> hinzugefügt:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> addToHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> Error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token comment\">// (...) previous code</span><br /><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>HTMLAnchorElement<span class=\"token operator\">></span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span><br />    link<span class=\"token punctuation\">.</span>rel <span class=\"token operator\">=</span> <span class=\"token string\">'prefetch'</span><span class=\"token punctuation\">;</span><br /><br />    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</section>\n</section>\n<section>\n<h2 id=\"eine-interaktion-pro-link\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#eine-interaktion-pro-link\">Eine Interaktion pro Link</a></h2>\n<p>Um unnötige Netzwerkanfragen zu vermeiden, soll nur eine Interaktion pro Link das Prefetching auslösen.<br />\nWurde ein Link beispielsweise mit der Tastatur fokussiert, soll ein Hovern mit der Maus keinen weiteren Vorgang auslösen.<br />\nEin Event an sich nur ein einziges Mal auslösen ist einfach:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><br />  <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">once</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Pro Element nur ein einziges Event auszulösen ist etwas komplizierter.<br />\nVorbereitend wird wieder eine leere Funktion erstellt. Diese erwartet einen Link und ein Array an Events - hier vorbelegt mit <code>mouseover</code> und <code>focus</code>.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* TypeScript */</span><br /><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addPrefetchLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><br />  link<span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">,</span><br />  userEvents<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> HTMLElementEventMap<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br />    <span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span><br />    <span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Der Rest des Codes wird in zwei Teile unterteilt, einen der EventListener entfernt und das hinzufügen zum <code>&lt;head&gt;</code> übernimmt und einen welcher EventListener hinzufügt.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/* TypeScript */</span><br /><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> addPrefetchLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><br />  link<span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">,</span><br />  userEvents<span class=\"token operator\">:</span> ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> HTMLElementEventMap<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><br />    <span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span><br />    <span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br />    <span class=\"token comment\">// Remove listeners</span><br />    userEvents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br />      link<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token function\">addToHead</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token comment\">// Register listeners</span><br />  userEvents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br />    link<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>userEvent<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Die hier als <code>handler</code> benannte Funktion entfernt zunächst alle auf einen Link gebundenen Events und fügt dann den Link via <code>addToHead</code> hinzu. Fertig! Wobei da eine Sache noch bleibt: sollte ein Link öfters vorhanden sein, wird dieser dennoch ein weiteres mal hinzugefügt. Lösen könnte man das wohl mit einem <code>Set</code> - das kommt (vielleicht) in einem Update.</p>\n</section>\n<section>\n<h2 id=\"fazit\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/beschleunigte-navigation-mit-addPrefetchLink/#fazit\">Fazit</a></h2>\n<p>Neben der Herausforderung keine unnötigen Netzwerkanfragen auszulösen, war das Ganze<br />\nauch ein erster erfolgreicher Versuch ein NPM-Modul zu schreiben und zu veröffentlichen.<br />\nWichtige Felder die zur Veröffentlichung benötigt werden, sind: <code>main</code>, <code>type</code> sowie <code>files</code> in der package.json.<br />\nWeitere Details zum Projekt auf Github.<br />\nDa es mein erstes NPM-Modul ist, freue ich mich natürlich besonders über Feedback <a class=\"text-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:tony.spegel@gmail.com\" title=\"E-Mail schreiben\">tony.spegel@gmail.com</a></p>\n</section>\n",
      "date_published": "2021-10-04T00:00:00Z"
    },{
      "id": "https://tony-spegel.com/blog/challenge-progress-stepper/",
      "url": "https://tony-spegel.com/blog/challenge-progress-stepper/",
      "title": "Challenge: Progress Stepper",
      "content_html": "<figure>\n  <img src=\"https://tony-spegel.com/img/2021/fecc-challenge-008.png\" alt=\"Fortschrittsanzeige für einen Checkout-Prozess\" width=\"320\" height=\"303\" />\n  <figcaption>Abbildung von © Andy Bell</figcaption>\n</figure>\n<p>Vor einer Weile habe ich auf Twitter diese <a href=\"https://piccalil.li/blog/challenge-008-progress-stepper/\">Challenge</a> entdeckt, gespeichert und schließlich für längere Zeit vergessen (kennt man ja).</p>\n<p>In dieser Challenge geht es darum, einen so genanten Progress Stepper umzusetzen - also etwas das man beispielsweise aus einem Lieferprozess oder im Checkout eines Onlineshops kennt. Die wichtigsten Punkte welche dieser erfüllen soll sind:</p>\n<ul>\n<li>Die Lösung nutzt semantisches HTML</li>\n<li>Die Lösung funktioniert sowohl mit wenigen als auch beliebig vielen Punkten</li>\n<li>Lange wie kurze Texte sollen unterstützt werden</li>\n</ul>\n<section>\n<h2 id=\"vorueberlegungen\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#vorueberlegungen\">Vorüberlegungen</a></h2>\n<ul>\n<li>Da eine zeitliche Abfolge dargestellt werden soll, bietet es sich an ein <code>&lt;ol&gt;</code>-Element zu nutzen - eine ordered list</li>\n<li>verschiedene Zustände müssen dargestellt werden: offen, in Bearbeitung und abgeschlossen</li>\n<li>Auch Screenreader müssen den jeweiligen Status eines Schritts verarbeiten können so dass jede/r weiß was der aktuelle Stand ist</li>\n</ul>\n</section>\n<section>\n<h2 id=\"html\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#html\">HTML</a></h2>\n<p>Für ein Layout dieser Form habe ich mich entschieden für jeden Schritt sowie der Liste als Ganzes display: flex; und für den Fortschrittsindikator und den Verbindungsstücken <code>:before</code> bzw. <code>:after</code> zu nutzen. Die Anzeige des jeweiligen Schritts und dessen Beschreibung wird jeweils mit einem <code>&lt;div&gt;</code> umschlossen. Über das data-state=&quot;complete&quot;-Attribut wird ein abgeschlossener Zustand signalisiert und mit <code>aria-current=&quot;step&quot;</code> für Screenreader der aktuelle Schritt gekennzeichnet (mehr zum <code>aria-tag</code> hier).</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>progress-stepper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">data-state</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>complete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>step<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Schritt 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Warenkorb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">data-state</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>complete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>step<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Schritt 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Details<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">aria-current</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>step<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>step<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Schritt 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Zahlungsmittel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>step<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Schritt 4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br />          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>Zahlung abschließen<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><br />      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br />    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br />  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span><br /><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n</section>\n<section>\n<h2 id=\"css\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#css\">CSS</a></h2>\n<p>Um verschieden Lange und beliebig viele Schritte darzustellen nutze ich CSS custom properties / CSS Variablen. Diese Variablen sind hier besonders praktisch, um die Länge der Verbindungsstücke zu berechnen. Der Rest ist vor allem viel Berechnung mit Hilfe von <code>calc()</code> und den Eingangs erwähnten Zuständen via <code>[data-state='complete']</code>.</p>\n<section>\n<h3 id=\"variablen-and-reset\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#variablen-and-reset\">Variablen &amp; Reset</a></h3>\n<p>Die hier genutzten Variablen sind relativ überschaubar: ich lege vor allem ein paar Grundfarben sowie Abstände, die Größe des Indikators, die Zeilenhöhe, den Abstand zwischen den Schritten sowie die Breite des Verbindungsstücks fest. Die Farben sind hierbei selbst gewählt und weichen etwas von der Vorgabe ab; oft bietet es sich an, neben surface colors auch Schriftfarben zu definieren.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">--surface-1</span><span class=\"token punctuation\">:</span> #cb99e1<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">--surface-2</span><span class=\"token punctuation\">:</span> #debfed<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">--surface-3</span><span class=\"token punctuation\">:</span> #f2e6f8<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">--surface-4</span><span class=\"token punctuation\">:</span> #f8f2fb<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">--base-gap</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">--circle-size</span><span class=\"token punctuation\">:</span> 26px<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">--line-height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--circle-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">--step-margin</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">--connection-width</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">*,<br />*:before,<br />*:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/* Container element */</span><br /><span class=\"token selector\">.progress-stepper</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--base-gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/* Wrapper for description */</span><br /><span class=\"token selector\">.step</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--line-height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h3 id=\"die-liste\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#die-liste\">Die Liste</a></h3>\n<p>Die Liste als solches ist schnell beschrieben: ein <code>flex</code>-Layout in der Vertikalen sowie in der Horizontalen für jeden Schritt. Hierbei noch erwähnenswert ist die Property <code>gap</code> welche mittlerweile auch für <code>flex</code>-Container verfügbar ist und einen Abstand zwischen Elementen erzeugt.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">ol</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--base-gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--step-margin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token selector\">li:last-child</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h3 id=\"fortschrittsindikator\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#fortschrittsindikator\">Fortschrittsindikator</a></h3>\n<p>Der Fortschrittsindikator (der jeweilige Kreis in jedem Schritt) wiederum ist auch nur ein <code>flex</code>-Container und wird mittels <code>align-self: center</code> vertikal zentriert. Ist ein Schritt als abgeschlossen markiert, ändert sich dessen Farbe und ein Haken wird hinzugefügt.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/**<br /> * Circle Element - default<br /> */</span><br /><span class=\"token selector\">li:before</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">place-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--surface-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--circle-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--circle-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--circle-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--surface-4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/**<br /> * Circle Element - complete<br /> */</span><br /><span class=\"token selector\">li[data-state='complete']:before</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'✓'</span><span class=\"token punctuation\">;</span><br />    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--surface-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n<section>\n<h3 id=\"verbindungselement\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#verbindungselement\">Verbindungselement</a></h3>\n<p>Die eigentliche Herausforderung waren die Verbindungselemente zwischen den Kreisen. Diese mussten nahtlos ineinander übergehen und das möglichst bei verschieden langen Beschriftungen. Um nicht zu viel zusätzliches HTML zu schreiben, hat es sich als praktisch erwiesen, das Verbindungselement absolut zu positionieren. Die Länge der Verbindung ergibt sich dann aus Abstand, Höhe des Schritts sowie der Zeilenhöhe. Das Ganze ist auf jeden Fall nicht perfekt und funktioniert nicht mehr optimal bei Beschriftungen die sich über drei Zeilen erstrecken - was hoffentlich selten der Fall sein sollte. Falls jemand noch eine bessere Lösung hat - gern an mich schicken <a class=\"text-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"mailto:tony.spegel@gmail.com\" title=\"E-Mail schreiben\">tony.spegel@gmail.com</a></p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* Connection - default */</span><br /><span class=\"token selector\">li:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--connection-width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><br />      <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--circle-size<span class=\"token punctuation\">)</span> / 2 - <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--connection-width<span class=\"token punctuation\">)</span> / 2<br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--surface-2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/* Finished step */</span><br /><span class=\"token selector\">li[data-state='complete']:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><br />  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--step-margin<span class=\"token punctuation\">)</span> + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--line-height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/* First connection */</span><br /><span class=\"token selector\">li:first-child:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>100% + <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--step-margin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--line-height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token comment\">/* Last connection */</span><br /><span class=\"token selector\">li:last-child:after</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n</section>\n</section>\n<section>\n<h2 id=\"fazit\"><a class=\"header-anchor\" href=\"https://tony-spegel.com/blog/challenge-progress-stepper/#fazit\">Fazit</a></h2>\n<p>Perfekt ist meine Lösung zwar nicht aber interessant war es alle Mal. Besonders geholfen haben hier die CSS Variablen mit denen zwar viel mit festen Werten gerechnet wurde aber diese immerhin voneinander abhängig sind und somit kein großes Problem darstellen sollten. In der Realität müsste es noch einen Prozess geben, welcher den jeweiligen Stand einer Bestellung etc. im HTML widerspiegelt - ob statisch oder dynamisch wäre hierbei egal. Lediglich das für Screenreader wichtige <code>aria-current=&quot;step&quot;</code> sollte im aktuellen Schritt gesetzt sein.<br />\nDen Code als Ganzes gibt es noch einmal hier auf meinem <a href=\"https://codepen.io/TonySpegel/pen/XWgWRgm?editors=1100\">Codepen</a>.</p>\n</section>\n",
      "date_published": "2021-08-23T00:00:00Z"
    }
  ]
}
